diff --git a/arch/arm64/boot/dts/rockchip/Makefile b/arch/arm64/boot/dts/rockchip/Makefile
index 497b4ed3f..edc58e977 100644
--- a/arch/arm64/boot/dts/rockchip/Makefile
+++ b/arch/arm64/boot/dts/rockchip/Makefile
@@ -16,6 +16,7 @@ dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3326-magicx-xu10.dtb
 dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3326-odroid-go2.dtb
 dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3326-odroid-go2-v11.dtb
 dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3326-odroid-go3.dtb
+dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3326-magicx-xu-mini.dtb
 dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3326-powkiddy-rgb10.dtb
 dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3326-powkiddy-rgb20s.dtb
 dtb-$(CONFIG_ARCH_ROCKCHIP) += rk3328-a1.dtb
diff --git a/arch/arm64/boot/dts/rockchip/rk3326-magicx-xu-mini.dts b/arch/arm64/boot/dts/rockchip/rk3326-magicx-xu-mini.dts
new file mode 100644
index 000000000..c27c44f27
--- /dev/null
+++ b/arch/arm64/boot/dts/rockchip/rk3326-magicx-xu-mini.dts
@@ -0,0 +1,345 @@
+// SPDX-License-Identifier: (GPL-2.0+ OR MIT)
+/*
+ * Copyright (c) 2019 Hardkernel Co., Ltd
+ * Copyright (c) 2020 Theobroma Systems Design und Consulting GmbH
+ * Copyright (c) 2022 Maya Matuszczyk <maccraft123mc@gmail.com>
+ * Copyright (c) 2024 Olivier Schonken <olivier.schonken@gmail.com>
+*/
+
+#include "rk3326-magicx-xu10.dts"
+
+/ {
+    model = "MagicX XU Mini M";
+    compatible = "magicx,xu-mini", "rockchip,rk3326";
+
+};
+
+&battery {
+    compatible = "simple-battery";
+    charge-full-design-microamp-hours = <2300000>;
+    charge-term-current-microamp = <300000>;
+    constant-charge-current-max-microamp = <2000000>;
+    constant-charge-voltage-max-microvolt = <4200000>;
+    factory-internal-resistance-micro-ohms = <180000>;
+    voltage-max-design-microvolt = <4100000>;
+    voltage-min-design-microvolt = <3500000>;
+
+    ocv-capacity-celsius = <20>;
+    ocv-capacity-table-0 =  <4046950 100>, <4001920 95>, <3967900 90>, <3919950 85>,
+                <3888450 80>, <3861850 75>, <3831540 70>, <3799130 65>,
+                <3768190 60>, <3745650 55>, <3726610 50>, <3711630 45>,
+                <3696720 40>, <3685660 35>, <3674950 30>, <3663050 25>,
+                <3649470 20>, <3635260 15>, <3616920 10>, <3592440 5>,
+                <3574170 0>;
+};
+
+&joypad {
+    compatible = "xu10-joypad";
+
+    joypad-name = "XU Mini Gamepad";
+    joypad-product = <0x1100>;
+    joypad-revision = <0x100>;
+
+    status = "okay";
+            /*
+    - xu-mini-joypad sysfs list -
+    * for poll device interval(ms)
+        /sys/devices/platform/odroidgo3_joypad/poll_interval [rw]
+        ex) echo 20 > poll_interval
+    * for button-adc-fuzz
+        /sys/devices/platform/odroidgo3_joypad/adc_fuzz [r]
+    * for button-adc-flat
+        /sys/devices/platform/odroidgo3_joypad/adc_flat [r]
+
+    * for report control(1:enable, 0:disable)
+        /sys/devices/platform/odroidgo3_joypad/enable [rw]
+    * for adc calibration value setup(current adcs value -> cal value)
+        /sys/devices/platform/odroidgo3_joypad/adc_cal [rw]
+        ex) echo 0 > adc_cal
+    * for amux data debug
+    * Joypad driver is disabled when using this sysfs.
+        /sys/devices/platform/odroidgo3_joypad/amux_debug [rw]
+        ex) echo 0 > amux_debug --> select amux channel
+        ex) cat amux_debug --> get adc data of seleted channel
+    */
+
+    /* gpio pincontrol setup */
+    pinctrl-names = "default";
+    pinctrl-0 = <&btn_pins>;
+
+    /* Analog mux define */
+    io-channel-names = "joy_left", "joy_right";
+    io-channels = <&saradc 1>, <&saradc 2>;
+
+    /* adc mux channel count */
+    amux-count = <4>;
+
+    /* adc mux select(a,b) gpio */
+    amux-a-gpios = <&gpio2 RK_PB3 GPIO_ACTIVE_LOW>;
+    amux-b-gpios = <&gpio2 RK_PB5 GPIO_ACTIVE_LOW>;
+
+    /* adc mux enable gpio */
+    amux-en-gpios = <&gpio1 RK_PB0 GPIO_ACTIVE_LOW>;
+
+    /* adc calculate scale */
+    button-adc-scale = <2>;
+
+    /* adc deadzone range  */
+    button-adc-deadzone = <180>;
+
+    /*
+        specifies fuzz value that is used to filter noise from
+        the event stream.
+    */
+    button-adc-fuzz = <32>;
+    button-adc-flat = <32>;
+
+    /*
+        Analog Stick data tuning value(precent)
+        p = positive direction, n = negative direction
+        report value = (real_adc_data * tuning_value) / 100
+    */
+    abs_x-p-tuning = <5657>;
+    abs_x-n-tuning = <5657>;
+
+    abs_y-p-tuning = <5657>;
+    abs_y-n-tuning = <5657>;
+
+    abs_rx-p-tuning = <5657>;
+    abs_rx-n-tuning = <5657>;
+
+    abs_ry-p-tuning = <5657>;
+    abs_ry-n-tuning = <5657>;
+
+    /* poll device interval (ms), adc read interval */
+    poll-interval = <10>;
+
+    /* gpio button auto repeat set value : default disable */
+    /*
+    autorepeat;
+    */
+
+    /*
+    *** MagicX XU-Mini Switch layoout ***
+    |------------------------------------------------|
+    | sw14  sw17              vol- vol+  sw16  sw15  |
+    |------------------------------------------------|
+    |     sw9                            sw10        |
+    |              |-------------------|             |
+    |     sw1      |                   |      sw7    |
+    |  sw3   sw4   |                   |   sw8   sw6 |
+    |     sw2      |    LCD Display    |      sw5    |
+    |              |                   |             |
+    |              |                   |             |
+    |    sw11      |-------------------|      sw12   |
+    |                                                |
+    |----------------------sw13----------------------|
+    */
+
+    /*
+        joypad driver is poll-device driver.
+        poll-device is does not support wakeup-source.
+    */
+
+    sw1 {
+        gpios = <&gpio1 RK_PB4 GPIO_ACTIVE_LOW>;
+        label = "GPIO DPAD-UP";
+        linux,code = <BTN_DPAD_UP>; // 0x220
+    };
+    sw2 {
+        gpios = <&gpio1 RK_PB5 GPIO_ACTIVE_LOW>;
+        label = "GPIO DPAD-DOWN";
+        linux,code = <BTN_DPAD_DOWN>; // 0x221
+    };
+    sw3 {
+        gpios = <&gpio1 RK_PB6 GPIO_ACTIVE_LOW>;
+        label = "GPIO DPAD-LEFT";
+        linux,code = <BTN_DPAD_LEFT>; // 0x222
+    };
+    sw4 {
+        gpios = <&gpio1 RK_PB7 GPIO_ACTIVE_LOW>;
+        label = "GPIO DPAD-RIGHT";
+        linux,code = <BTN_DPAD_RIGHT>; // 0x223
+    };
+    sw5 {
+        gpios = <&gpio2 RK_PA2 GPIO_ACTIVE_LOW>;
+        label = "GPIO BTN-A";
+        linux,code = <BTN_SOUTH>; // 0x130
+    };
+    sw6 {
+        gpios = <&gpio2 RK_PA3 GPIO_ACTIVE_LOW>;
+        label = "GPIO BTN-B";
+        linux,code = <BTN_EAST>; // 0x131
+    };
+    sw7 {
+        gpios = <&gpio2 RK_PA1 GPIO_ACTIVE_LOW>;
+        label = "GPIO BTN-Y";
+        linux,code = <BTN_NORTH>; // 0x133
+    };
+    sw8 {
+        gpios = <&gpio2 RK_PA0 GPIO_ACTIVE_LOW>;
+        label = "GPIO BTN-X";
+        linux,code = <BTN_WEST>; // 0x134
+    };
+    sw9 {
+        gpios = <&gpio2 RK_PB0 GPIO_ACTIVE_LOW>;
+        label = "GPIO BTN-SELECT";
+        linux,code = <BTN_SELECT>; // 0x13a
+    };
+    sw10 {
+        gpios = <&gpio2 RK_PA5 GPIO_ACTIVE_LOW>;
+        label = "GPIO BTN-START";
+        linux,code = <BTN_START>; // 0x13b
+    };
+    sw11 {
+        gpios = <&gpio2 RK_PB1 GPIO_ACTIVE_LOW>;
+        label = "GPIO BTN-THUMBL";
+        linux,code = <BTN_THUMBL>; // 0x13d
+    };
+    sw12 {
+        gpios = <&gpio2 RK_PB2 GPIO_ACTIVE_LOW>;
+        label = "GPIO BTN-THUMBR";
+        linux,code = <BTN_THUMBR>; // 0x13e
+    };
+    sw13 {
+        gpios = <&gpio2 RK_PA4 GPIO_ACTIVE_LOW>;
+        label = "GPIO BTN-G";
+        linux,code = <BTN_TRIGGER_HAPPY1>; // 0x2c0
+    };
+    sw14 {
+        gpios = <&gpio2 RK_PA6 GPIO_ACTIVE_LOW>;
+        label = "GPIO BTN-LEFT";
+        linux,code = <BTN_TL>; // 0x136
+    };
+    sw15 {
+        gpios = <&gpio2 RK_PA7 GPIO_ACTIVE_LOW>;
+        label = "GPIO BTN-RIGHT";
+        linux,code = <BTN_TR>; // 0x137
+    };
+    sw16 {
+        gpios = <&gpio3 RK_PB2 GPIO_ACTIVE_LOW>;
+        label = "GPIO BTN-RIGHT2";
+        linux,code = <BTN_TR2>; // 0x139
+    };
+    sw17 {
+        gpios = <&gpio3 RK_PB4 GPIO_ACTIVE_LOW>;
+        label = "GPIO BTN-LEFT2";
+        linux,code = <BTN_TL2>; // 0x138
+    };
+};
+
+
+&display_subsystem {
+    status = "okay";
+};
+
+&dsi {
+    status = "okay";
+
+    ports {
+        mipi_out: port@1 {
+          reg = <1>;
+
+          mipi_out_panel: endpoint {
+              remote-endpoint = <&mipi_in_panel>;
+          };
+        };
+    };
+
+    internal_display: panel@0 {
+        compatible = "magicx,xu-mini-panel", "sitronix,st7701";
+        iovcc-supply = <&vcc18_lcd0>;
+        vcc-supply = <&vcc18_lcd0>;
+        reg = <0>;
+        backlight = <&backlight>;
+        reset-gpios = <&gpio3 RK_PB7 GPIO_ACTIVE_HIGH>;
+        pinctrl-names = "default";
+        pinctrl-0 = <&lcd_rst>;
+        rotation = <90>;
+        status = "okay";
+
+        port {
+            mipi_in_panel: endpoint {
+                remote-endpoint = <&mipi_out_panel>;
+            };
+        };
+    };
+};
+
+&pinctrl {
+      btns {
+        btn_pins: btn-pins {
+          rockchip,pins = <1 RK_PB4 RK_FUNC_GPIO &pcfg_pull_up>,
+              <1 RK_PB5 RK_FUNC_GPIO &pcfg_pull_up>,
+              <1 RK_PB6 RK_FUNC_GPIO &pcfg_pull_up>,
+              <1 RK_PB7 RK_FUNC_GPIO &pcfg_pull_up>,
+              <2 RK_PA0 RK_FUNC_GPIO &pcfg_pull_up>,
+              <2 RK_PA1 RK_FUNC_GPIO &pcfg_pull_up>,
+              <2 RK_PA2 RK_FUNC_GPIO &pcfg_pull_up>,
+              <2 RK_PA3 RK_FUNC_GPIO &pcfg_pull_up>,
+              <2 RK_PA4 RK_FUNC_GPIO &pcfg_pull_up>,
+              <2 RK_PA5 RK_FUNC_GPIO &pcfg_pull_up>,
+              <2 RK_PA6 RK_FUNC_GPIO &pcfg_pull_up>,
+              <2 RK_PA7 RK_FUNC_GPIO &pcfg_pull_up>,
+              <2 RK_PB0 RK_FUNC_GPIO &pcfg_pull_up>,
+              <2 RK_PB1 RK_FUNC_GPIO &pcfg_pull_up>,
+              <2 RK_PB2 RK_FUNC_GPIO &pcfg_pull_up>,
+              <3 RK_PB2 RK_FUNC_GPIO &pcfg_pull_up>,
+              <3 RK_PB4 RK_FUNC_GPIO &pcfg_pull_up>;
+        };
+
+    btn_pins_vol: btn-pins-vol {
+        rockchip,pins =
+            <0 RK_PC1 RK_FUNC_GPIO &pcfg_pull_up>,
+            <0 RK_PB7 RK_FUNC_GPIO &pcfg_pull_up>;
+        };
+    };
+
+    headphone {
+        hp_det: hp-det {
+            rockchip,pins = <2 RK_PC6 RK_FUNC_GPIO &pcfg_pull_down>;
+        };
+    };
+
+    gpio-lcd {
+        lcd_rst: lcd-rst {
+            rockchip,pins = <3 RK_PB7 RK_FUNC_GPIO &pcfg_pull_none>;
+        };
+    };
+
+    vcc18-lcd {
+        vcc18_lcd_n: vcc18-lcd-n {
+            rockchip,pins = <0 RK_PB5 RK_FUNC_GPIO &pcfg_pull_none>;
+        };
+    };
+
+    gpio-led {
+        led_pins: led-pins {
+            rockchip,pins =
+                <0 RK_PB3 RK_FUNC_GPIO &pcfg_pull_none>,
+                <0 RK_PB4 RK_FUNC_GPIO &pcfg_pull_none>;
+        };
+    };
+
+    pmic {
+        dc_det: dc-det {
+            rockchip,pins = <0 RK_PB3 RK_FUNC_GPIO &pcfg_pull_none>;
+        };
+
+        pmic_int: pmic-int {
+            rockchip,pins = <0 RK_PB2 RK_FUNC_GPIO &pcfg_pull_up>;
+        };
+
+        soc_slppin_gpio: soc_slppin_gpio {
+            rockchip,pins = <0 RK_PA4 RK_FUNC_GPIO &pcfg_output_low>;
+        };
+
+        soc_slppin_rst: soc_slppin_rst {
+            rockchip,pins = <0 RK_PA4 2 &pcfg_pull_none>;
+        };
+
+        soc_slppin_slp: soc_slppin_slp {
+            rockchip,pins = <0 RK_PA4 1 &pcfg_pull_none>;
+        };
+   };
+};
diff --git a/drivers/gpu/drm/panel/panel-sitronix-st7701.c b/drivers/gpu/drm/panel/panel-sitronix-st7701.c
index 421eb4592..753d69e6e 100644
--- a/drivers/gpu/drm/panel/panel-sitronix-st7701.c
+++ b/drivers/gpu/drm/panel/panel-sitronix-st7701.c
@@ -332,6 +332,41 @@ static void ts8550b_gip_sequence(struct st7701 *st7701)
 		   0xFF, 0xFF, 0xFF, 0xF3, 0x27, 0x65, 0x40, 0x1F, 0xFF);
 }
 
+static void ho28b23_gip_sequence(struct st7701 *st7701)
+{
+	/**
+	 * ST7701_SPEC_V1.2 is unable to provide enough information above this
+	 * specific command sequence, so grab the same from vendor BSP driver.
+	 */
+	ST7701_DSI(st7701, 0xE0, 0x00, 0x00, 0x02);
+	ST7701_DSI(st7701, 0xE1, 0x04, 0xA0, 0x06, 0xA0, 0x05, 0xA0, 0x07,
+		   0xA0, 0x00, 0x44, 0x44);
+	ST7701_DSI(st7701, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+		   0x00, 0x00, 0x00, 0x00, 0x00);
+	ST7701_DSI(st7701, 0xE3, 0x00, 0x00, 0x22, 0x22);
+	ST7701_DSI(st7701, 0xE4, 0x44, 0x44);
+	ST7701_DSI(st7701, 0xE5, 0x0C, 0x90, 0xA0, 0xA0, 0x0E, 0x92, 0xA0,
+		   0xA0, 0x08, 0x8c, 0xA0, 0xA0, 0x0A, 0x8E, 0xA0, 0xA0);
+	ST7701_DSI(st7701, 0xE6, 0x00, 0x00, 0x22, 0x22);
+	ST7701_DSI(st7701, 0xE7, 0x44, 0x44);
+	ST7701_DSI(st7701, 0xE8, 0x0D, 0x91, 0xA0, 0xA0, 0x0F, 0x93, 0xA0,
+		   0xA0, 0x09, 0x8D, 0xA0, 0xA0, 0x0B, 0x8F, 0xA0, 0xA0);
+	ST7701_DSI(st7701, 0xEB, 0x00, 0x00, 0xE4, 0xE4, 0x44, 0x00, 0x40);
+	ST7701_DSI(st7701, 0xED, 0xFF, 0xF5, 0x47, 0x6F, 0x0B, 0xA1, 0xAB,
+		   0xFF, 0xFF, 0xBA, 0x1A, 0xB0, 0xF6, 0x74, 0x5F, 0xFF);
+	ST7701_DSI(st7701, 0xEF, 0x08, 0x08, 0x08, 0x40, 0x3F, 0x64);
+
+	st7701_switch_cmd_bkx(st7701, true, 3);
+	ST7701_DSI(st7701, 0xE6, 0x16, 0x7C);
+	ST7701_DSI(st7701, 0xE8, 0x00, 0x0E);
+
+	ST7701_DSI(st7701, 0xE8, 0x00, 0x0C);
+	msleep(50);
+	ST7701_DSI(st7701, 0xE8, 0x00, 0x00);
+
+	st7701_switch_cmd_bkx(st7701, false, 0);
+}
+
 static void dmt028vghmcmi_1a_gip_sequence(struct st7701 *st7701)
 {
 	ST7701_DSI(st7701, 0xEE, 0x42);
@@ -675,6 +710,109 @@ static const struct st7701_panel_desc ts8550b_desc = {
 	.gip_sequence = ts8550b_gip_sequence,
 };
 
+static const struct drm_display_mode ho28b23_mode = {
+	.clock		= 25000,
+
+	.hdisplay	= 480,
+	.hsync_start	= 480 + 30,
+	.hsync_end	= 480 + 30 + 8,
+	.htotal		= 480 + 30 + 8 + 30,
+
+	.vdisplay	= 640,
+	.vsync_start	= 640 + 2,
+	.vsync_end	= 640 + 2 + 1,
+	.vtotal		= 640 + 2 + 1 + 16,
+
+	.width_mm	= 56,
+	.height_mm	= 78,
+
+	.flags		= DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC,
+
+	.type = DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED,
+};
+
+static const struct st7701_panel_desc ho28b23_desc = {
+	.mode = &ho28b23_mode,
+	.lanes = 2,
+	.format = MIPI_DSI_FMT_RGB888,
+	.panel_sleep_delay = 5, /* panel need extra 5ms for sleep out cmd */
+	.pv_gamma = {
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_AJ_MASK, 0) |
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC0_MASK, 06),
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_AJ_MASK, 0) |
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC4_MASK, 0x16),
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_AJ_MASK, 0) |
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC8_MASK, 0x1e),
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC16_MASK, 0xe),
+
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_AJ_MASK, 0) |
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC24_MASK, 0x12),
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC52_MASK, 0x6),
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC80_MASK, 0xA),
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC108_MASK, 0x8),
+
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC147_MASK, 0x9),
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC175_MASK, 0x23),
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC203_MASK, 0x4),
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_AJ_MASK, 0) |
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC231_MASK, 0x12),
+
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC239_MASK, 0x10),
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_AJ_MASK, 0) |
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC247_MASK, 0x2B),
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_AJ_MASK, 0) |
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC251_MASK, 0x31),
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_AJ_MASK, 0) |
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC255_MASK, 0x1F)
+	},
+	.nv_gamma = {
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_AJ_MASK, 0) |
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC0_MASK, 0x06),
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_AJ_MASK, 0) |
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC4_MASK, 0xf),
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_AJ_MASK, 0) |
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC8_MASK, 0x16),
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC16_MASK, 0xd),
+
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_AJ_MASK, 0) |
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC24_MASK, 0x10),
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC52_MASK, 0x7),
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC80_MASK, 0x4),
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC108_MASK, 0x9),
+
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC147_MASK, 0x7),
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC175_MASK, 0x20),
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC203_MASK, 0x5),
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_AJ_MASK, 0) |
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC231_MASK, 0x12),
+
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC239_MASK, 0x10),
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_AJ_MASK, 0) |
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC247_MASK, 0x26),
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_AJ_MASK, 0) |
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC251_MASK, 0x2f),
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_AJ_MASK, 0) |
+		CFIELD_PREP(DSI_CMD2_BK0_GAMCTRL_VC255_MASK, 0x1f)
+	},
+	.nlinv = 0,
+	.vop_uv = 4800000,
+	.vcom_uv = 1762500,
+	.vgh_mv = 15000,
+	.vgl_mv = -7910,
+	.avdd_mv = 6600,
+	.avcl_mv = -4400,
+	.gamma_op_bias = OP_BIAS_MIDDLE,
+	.input_op_bias = OP_BIAS_MIN,
+	.output_op_bias = OP_BIAS_MIN,
+	.t2d_ns = 1600,
+	.t3d_ns = 10400,
+	.eot_en = true,
+	.gip_sequence = ho28b23_gip_sequence,
+};
+
+
+/////////////
+
 static const struct drm_display_mode dmt028vghmcmi_1a_mode = {
 	.clock		= 22325,
 
@@ -1056,6 +1194,7 @@ static const struct of_device_id st7701_of_match[] = {
 	{ .compatible = "densitron,dmt028vghmcmi-1a", .data = &dmt028vghmcmi_1a_desc },
 	{ .compatible = "elida,kd50t048a", .data = &kd50t048a_desc },
 	{ .compatible = "techstar,ts8550b", .data = &ts8550b_desc },
+	{ .compatible = "magicx,xu-mini-panel", .data = &ho28b23_desc },
 	{ }
 };
 MODULE_DEVICE_TABLE(of, st7701_of_match);
